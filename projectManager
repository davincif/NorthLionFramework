#!/bin/bash

###VARIABLES###
PROJECTPATH="projects"
USERPROJECT=""
PROJECTS=""
MACHINE_TYPE=`uname -m`
SYSTEM_TYPE=`uname -o`
#Path to includes and libs
PREPATH="../.."
NLFINCLUDES="-I $PREPATH/NLF_SCR"
NLFLIBS="-L./ -lNLF"
SDL2INCLUDES="-I $PREPATH/SDL2/include"
SDLIMAGE2INCLUDES="-I $PREPATH/SDL2/SDL_image"
CFLAGS="-O3 -Wall -Wno-unused-variable -Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wmaybe-uninitialized"
###############


###FUNCTIONS###
create_path()
{
	if ! [ -d "$1" ]; then
		mkdir "$1"
		echo "Path '$1' created."
	else
		echo "Path '$1' already exist."
		if [ "$2" == "--exclusive" ]; then
			exit 2
		fi
	fi
}

check_portability()
{
	#check whether whiptail or dialog is installed
	#(choosing the first command found)
	read BOX <<< "$(which whiptail dialog 2> /dev/null)"

	# exit if none found
	if ! [ "$BOX" ]; then
		echo 'neither whiptail nor dialog found' >&2
		exit 1
	else
		echo "using $BOX..."
	fi

	# just use whichever was found
	"$BOX" --msgbox "Message displayed with $BOX" 0 0
}

make_main()
{
	if [ $1 = "C" ]; then
		printf "#include <NLF.h>
/*#include \"your_library_here.h\"*/

int main(int argc, char *argv[])
{
	NLF_init();
	NLF_set_api(NLF_APIC);

	/*your code here*/

	NLF_quit();
	return 0;
}
" > $PROJECTPATH/$USERPROJECT/main.c
		echo "main file generated"
	elif [ $1 = "lua" ]; then
		printf "\n--Under development, sorry =/" > $PROJECTPATH/$USERPROJECT/main.lua
		echo "main file generated"
	else
		echo "something went wrong..."
		echo "make_main function got bad argument '$@'"
		exit 5
	fi
}

make_c_proj()
{
	#get parameters
	case $1 in
		-l2l )
			cp BINARIES/*.so $PROJECTPATH/$USERPROJECT/
			case $2 in
				-32 )
					CC="gcc -m32"
					COMPILEPATH="linux32"
				;;

				-64 )
					CC="gcc"
					COMPILEPATH="linux64"
				;;
			esac
		;;

		-l2w )
			cp BINARIES/*.dll $PROJECTPATH/$USERPROJECT/
			case $2 in
				-32 )
					CC="i686-w64-mingw32-gcc"
					COMPILEPATH="windows32"
				;;

				-64 )
					CC="x86_64-w64-mingw32-gcc"
					COMPILEPATH="windows64"
				;;
			esac
		;;
	esac
	cd $PROJECTPATH/$USERPROJECT
	rm -f -v -r $COMPILEPATH
	create_path $COMPILEPATH
	echo "$COMPILEPATH"

	#compile the project
	local SRCS=*.c
	local EXEC="main"
	if [ "$1" == "-l2l" ]; then
		local EXECEXTENTION=""
	else
		local EXECEXTENTION=".exe"
	fi
	PREPATH="../.."
	for file in $SRCS
	do
		if ! [ "$file" == "$EXEC.c" ]; then
			set -x
			$CC $CFLAGS $file -c -o ${file:0:$((${#file} - 2))}.o $NLFINCLUDES $SDL2INCLUDES $SDLIMAGE2INCLUDES $NLFLIBS
			set +x
		fi
	done
	set -x
	$CC -Wl,-R -Wl,./ $CFLAGS ./*.o $EXEC.c -o "$EXEC$EXECEXTENTION" $NLFINCLUDES $SDL2INCLUDES $SDLIMAGE2INCLUDES $NLFLIBS
	set +x

	#coping build
	cp $EXEC$EXECEXTENTION $COMPILEPATH/
	mv *.so $COMPILEPATH/
	rm -f -v ./*.o ./*.h.gch $EXEC$EXECEXTENTION

	cd $PREPATH
	PREPATH="./"
}
###############

##START
check_portability
ANSWER=$("$BOX" --title "NLF Project Manager" --menu "What do you need?" 10 30 2 \
"1" "Create new project" \
"2" "Build my project" 3>&1 1>&2 2>&3)
if ! [ $? = 0 ]; then
	echo "Canceled"
	exit 6
fi

case $ANSWER in
	1 ) #Create new project
		echo "ok, lets make a new project"
		USERPROJECT=$("$BOX" --title "New Project" --inputbox "What's the project name?" 10 60 MyProject 3>&1 1>&2 2>&3)
		if [ $? = 0 ]; then
			echo "chosen path: " $PROJECTPATH/$USERPROJECT
			create_path $PROJECTPATH
			create_path "$PROJECTPATH/$USERPROJECT" --exclusive
		else
			echo "Canceled"
			exit 3
		fi

		API=$("$BOX" --title "NLF_API" --menu "choose your API" 10 25 2 \
		"C" "Be powerful" \
		"lua" "Make it easy" 3>&1 1>&2 2>&3)
		if [ $? = 0 ]; then
			echo "API: " $API
		else
			echo "You chose Cancel."
			exit 4
		fi
		make_main $API
	;;

	2 ) #Build my project
		if ! [ -d "$PROJECTPATH" ]; then
			echo "sorry... any project have been created yet."
			echo "Perhaps is signal from the gods that you should create your own NLF project! =)"
			exit 7
		fi

		COUNT=1
		AUX=0;
		for proj in $PROJECTPATH/*; do
			if ! [ -d $proj ]; then
				echo "$proj is not a directory, what the hell is it doing here?"
				rm -v -f $proj
			else
				proj=${proj:${#PROJECTPATH}}
				STR[AUX]="${COUNT} ${proj:1}"
				PROJECTS[AUX]=${proj:1}
				COUNT+=1
				AUX+=1
			fi
		done
		USERPROJECT=$($BOX --title "NLF Project builder" --menu "Choose the project" 10 30 2 ${STR[@]} 3>&1 1>&2 2>&3)
		if ! [ $? = 0 ]; then
			echo "Canceled"
			exit 8
		fi
		USERPROJECT=$(($USERPROJECT-1))
		USERPROJECT=${PROJECTS[USERPROJECT]}
		if ! [ -d "$PROJECTPATH/$USERPROJECT" ]; then
			echo "The project \"$USERPROJECT\" do not exit"
			exit 9;
		fi
		echo "ok, lets build your project"
		make_c_proj -l2l -64
	;;
esac